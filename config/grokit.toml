# checks perform the actual execution of the comparison or match
[blocks]
    [blocks.icmp_v6_check_request]
    name = "icmp_v6_check_request"
    frontend_rule = "PFSENSE_ICMP_ECHO_REQ_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'request'"
    return_results = true

    [blocks.icmp_v6_check_reply]
    name = "icmp_v6_check_reply"
    frontend_rule = "PFSENSE_ICMP_ECHO_REP_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'reply'"
    return_results = true

    [blocks.icmp_v6_check_unreachproto]
    name = "icmp_v6_check_unreachproto"
    frontend_rule = "PFSENSE_ICMP_UNREACHABLE_PROTO_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreachproto'"
    return_results = true

    [blocks.icmp_v6_check_unreachport]
    name = "icmp_v6_check_unreachport"
    frontend_rule = "PFSENSE_ICMP_UNREACHABLE_PORT_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreachport'"
    return_results = true

    [blocks.icmp_v6_check_needfrag]
    name = "icmp_v6_check_needfrag"
    frontend_rule = "PFSENSE_ICMP_NEED_FRAG_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'needfrag'"
    return_results = true

    [blocks.icmp_v6_check_tstamp]
    name = "icmp_v6_check_tstamp"
    frontend_rule = "PFSENSE_ICMP_TIMESTAMP_REQ_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'tstamp'"
    return_results = true

    [blocks.icmp_v6_check_tstampreply]
    name = "icmp_v6_check_tstampreply"
    frontend_rule = "PFSENSE_ICMP_TIMESTAMP_REP_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'tstampreply'"
    return_results = true

    [blocks.icmp_v6_check_unreach]
    name = "icmp_v6_check_unreach"
    frontend_rule = "PFSENSE_ICMP_OTHER_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreach'"
    return_results = true

    [blocks.icmp_v6_check_other]
    name = "icmp_v6_check_other"
    frontend_rule = "PFSENSE_ICMP_OTHER_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None"
    return_results = true

    [blocks.icmp_v4_check_request]
    name = "icmp_v4_check_request"
    frontend_rule = "PFSENSE_ICMP_ECHO_REQ_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'request'"
    return_results = true

    [blocks.icmp_v4_check_reply]
    name = "icmp_v4_check_reply"
    frontend_rule = "PFSENSE_ICMP_ECHO_REP_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'reply'"
    return_results = true

    [blocks.icmp_v4_check_unreachproto]
    name = "icmp_v4_check_unreachproto"
    frontend_rule = "PFSENSE_ICMP_UNREACHABLE_PROTO_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreachproto'"
    return_results = true

    [blocks.icmp_v4_check_unreachport]
    name = "icmp_v4_check_unreachport"
    frontend_rule = "PFSENSE_ICMP_UNREACHABLE_PORT_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreachport'"
    return_results = true

    [blocks.icmp_v4_check_needfrag]
    name = "icmp_v4_check_needfrag"
    frontend_rule = "PFSENSE_ICMP_NEED_FRAG_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'needfrag'"
    return_results = true

    [blocks.icmp_v4_check_tstamp]
    name = "icmp_v4_check_tstamp"
    frontend_rule = "PFSENSE_ICMP_TIMESTAMP_REQ_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'tstamp'"
    return_results = true

    [blocks.icmp_v4_check_tstampreply]
    name = "icmp_v4_check_tstampreply"
    frontend_rule = "PFSENSE_ICMP_TIMESTAMP_REP_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'tstampreply'"
    return_results = true

    [blocks.icmp_v4_check_unreach]
    name = "icmp_v4_check_unreach"
    frontend_rule = "PFSENSE_ICMP_OTHER_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None and res.get('icmp_type') == 'unreach'"
    return_results = true

    [blocks.icmp_v4_check_other]
    name = "icmp_v4_check_other"
    frontend_rule = "PFSENSE_ICMP_OTHER_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('icmp_type', None) is not None"
    return_results = true

    [blocks.tcp_v4_check]
    name = "tcp_v4_check"
    frontend_rule = "PFSENSE_IP_RULE_V4"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('ip_proto', '') == '6'"
    return_results = true
    return_rule = "PFSENSE_TCP_RULE_V4"

    [blocks.tcp_v6_check]
    name = "tcp_v6_check"
    frontend_rule = "PFSENSE_IP_RULE_V6"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and res.get('ip_proto', '') == '6'"
    return_results = true
    return_rule = "PFSENSE_TCP_RULE_V6"

    [blocks.udp_v4_check]
    name = "udp_v4_check"
    frontend_rule = "PFSENSE_IP_RULE_V4"
    ctype = "static_list"
    cvalue = [["ip_proto", "17"]]
    return_results = true
    return_rule = "PFSENSE_UDP_RULE_V4"

    [blocks.udp_v6_check]
    name = "udp_v6_check"
    frontend_rule = "PFSENSE_IP_RULE_V6"
    ctype = "static_list"
    cvalue = [["ip_proto", "17"]]
    return_results = true
    return_rule = "PFSENSE_UDP_RULE_V6"

    [blocks.ip_v4_check]
    name = "ip_v4_check"
    frontend_rule = "PFSENSE_IP_RULE_V4"
    ctype = "static_list"
    cvalue = [["ip_version", "4"]]
    return_results = true

    [blocks.ip_v6_check]
    name = "ip_v6_check"
    frontend_rule = "PFSENSE_IP_RULE_V6"
    ctype = "static_list"
    cvalue = [["ip_version", "6"]]
    return_results = true

    [blocks.syslog_program_check]
    name = "syslog_program_check"
    frontend_rule = "SYSLOG_PRE_MSG"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('program', ''))"
    return_results = true

    [blocks.ovpn_mgmt_disconn_check]
    name = "ovpn_mgmt_disconn_check"
    frontend_rule = "OPENVPN_MGMT_DISCONN"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('management_action', ''))"
    return_results = true

    [blocks.ovpn_mgmt_conn_check]
    name = "ovpn_mgmt_conn_check"
    frontend_rule = "OPENVPN_MGMT_CONN"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('management_action', ''))"
    return_results = true

    [blocks.ovpn_mgmt_quit_check]
    name = "ovpn_mgmt_quit_check"
    frontend_rule = "OPENVPN_MGMT_QUIT"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('management_action', ''))"
    return_results = true

    [blocks.ovpn_mgmt_stat2_check]
    name = "ovpn_mgmt_stat2_check"
    frontend_rule = "OPENVPN_MGMT_QUIT"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('management_action', ''))"
    return_results = true

    [blocks.ovpn_failed_auth_check]
    name = "ovpn_failed_auth_check"
    frontend_rule = "OPENVPN_USER_AUTHN_FAILED"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('auth_state', ''))"
    return_results = true

    [blocks.ovpn_succ_auth_check]
    name = "ovpn_succ_auth_check"
    frontend_rule = "OPENVPN_USER_AUTHN_SUCCESS"
    ctype = "lambda"
    cvalue = "lambda state, res: res is not None and len(res.get('auth_state', ''))"
    return_results = true

    # "OPENVPN_CONNECTION_INIT",
    # "OPENVPN_DATA_CHANNEL_ENCRYPT_CIPHER",
    # "OPENVPN_DATA_CHANNEL_ENCRYPT_HMAC",
    # "OPENVPN_DATA_CHANNEL_DECRYPT_CIPHER",
    # "OPENVPN_DATA_CHANNEL_DECRYPT_HMAC",
    # "OPENVPN_CONTROL_CHANNEL_CIPHER_SPEC",
    # "OPENVPN_MULTI_LEARN",
    # "OPENVPN_MULTI_SVA",
    # "OPENVPN_TLS_INITIAL_CONNECT",
    # "OPENVPN_TLS_AUTH_SUCCESS",

[chain_tables]
    [chain_tables.syslog_dispatcher]
    name = "syslog_dispatcher"
    perform_checks = ['all']
    dispatch_table = [
                      ["filterlog", "filterlog"]#,
                      # ["openvpn", "openvpn"]
                    ]

    extract_rule = "SYSLOG_PRE_MSG"
    extract_type = "lambda"
    extract_value = "lambda state, res: res.get('program', '') if isinstance(res, dict) else None"

    all = ['syslog_program_check']

[chains]
    [chains.check_tcp]
    name = "check_tcp"
    # can be "any", "all", "blocks", "none"
    # natural order is order of execution
    any = ["tcp_v4_check", "tcp_v6_check"]
    # which checks to perform and what order
    perform_blocks = ["any"]

    [chains.check_udp]
    name = "check_udp"
    any = ["udp_v4_check", "udp_v6_check"]
    perform_blocks = ["any"]

    [chains.check_ip]
    name = "check_ip"
    any = ["ip_v4_check", "ip_v6_check"]
    perform_blocks = ["any"]

    [chains.check_v4_icmp]
    name = "check_v4_icmp"
    any = ["icmp_v4_check_request",
           "icmp_v4_check_reply",
           "icmp_v4_check_unreachproto",
           "icmp_v4_check_unreachport",
           "icmp_v4_check_needfrag",
           "icmp_v4_check_tstamp",
           "icmp_v4_check_tstampreply",
           "icmp_v4_check_unreach",
           "icmp_v4_check_other"
        ]
    perform_blocks = ["any"]

    [chains.check_v6_icmp]
    name = "check_v6_icmp"
    any = ["icmp_v6_check_request",
           "icmp_v6_check_reply",
           "icmp_v6_check_unreachproto",
           "icmp_v6_check_unreachport",
           "icmp_v6_check_needfrag",
           "icmp_v6_check_tstamp",
           "icmp_v6_check_tstampreply",
           "icmp_v6_check_unreach",
           "icmp_v6_check_other"
        ]
    perform_blocks = ["any"]


[chain_definition]
    [chain_definition.filterlog]
    name = "filterlog_chain"
    order = ["check_tcp", "check_udp", "check_v4_icmp", "check_v6_icmp", "check_ip"]

    [chain_definition.filterlog.chains.check_tcp]
    name = "check_tcp"
    # can be "any", "all", "checks", "none"
    # natural order is order of execution
    any = ["tcp_v4_check", "tcp_v6_check"]
    # which checks to perform and what order
    perform_checks = ["any"]

    [chain_definition.filterlog.chains.check_udp]
    name = "check_udp"
    any = ["udp_v4_check", "udp_v6_check"]
    perform_checks = ["any"]

    [chain_definition.filterlog.chains.check_v4_icmp]
    name = "check_v4_icmp"
    any = ["check_v4_icmp"]
    perform_checks = ["any"]

    [chain_definition.filterlog.chains.check_v6_icmp]
    name = "check_v6_icmp"
    any = ["check_v6_icmp"]
    perform_checks = ["any"]

    [chain_definition.filterlog.chains.check_ip]
    name = "check_ip"
    any = ["ip_v4_check", "ip_v6_check"]
    perform_checks = ["any"]


    # [chain_definition.openvpn]
    # name = "openvpn_chain"
    # order = ["check_conn_init", 
    #          "check_data_channel", 
    #          # "check_tls",
    #          "check_user_auth",
    #          "check_mgmt"
    #          ]

    # [chain_definition.openvpn.check_mgmt]
    # name = "check_mgmt"
    # # can be "any", "all", "checks", "none"
    # # natural order is order of execution
    # any = ["ovpn_mgmt_disconn_check",
    #        "ovpn_mgmt_conn_check",
    #        "ovpn_mgmt_quit_check",
    #        "ovpn_mgmt_stat2_check"
    #     ]
    # # which checks to perform and what order
    # perform_checks = ["any"]

    # [chain_definition.openvpn.check_conn_init]
    # name = "check_conn_init"
    # # can be "any", "all", "checks", "none"
    # # natural order is order of execution
    # any = []
    # # which checks to perform and what order
    # perform_checks = ["any"]

    # [chain_definition.openvpn.check_data_channel]
    # name = "check_data_channel"
    # any = []
    # perform_checks = ["any"]

    # # [chain_definition.openvpn.check_tls]
    # # name = "check_tls"
    # # any = []
    # # perform_checks = ["any"]

    # [chain_definition.openvpn.check_user_auth]
    # name = "check_user_auth"
    # any = ['ovpn_succ_auth_check',
    #        'ovpn_failed_auth_check']
    # perform_checks = ["any"]


[groups]
other = ["SYSLOG_PRE", 
         "SSHLOCKOUT_RULE", 
         "USR_SBIN_CRON_RULE"]
ngnix = ["NGINX_ACCESS_RULE"]
sshd = ["SSHD_BAD_PROTO_RULE",
        "SSHD_INTERACTIVE_SESSION_RULE",
        "SSHD_BACKGROUND_SESSION_RULE",
        "SSHD_CONNECTION_RESET_RULE",
        "SSHD_CLIENT_TIMEOUT_RULE",
        "SSHD_CLIENT_DISCONNECTED_RULE",
        "SSHD_DISCONNECT_RULE"
        ]

openvpn = [
    "OPENVPN_MGMT_CONN",
    "OPENVPN_MGMT_STAT2",
    "OPENVPN_MGMT_QUIT",
    "OPENVPN_MGMT_DISCONN",
    "OPENVPN_SENT_CONTROL",
    "OPENVPN_CONNECTION_INIT",
    "OPENVPN_DATA_CHANNEL_ENCRYPT_CIPHER",
    "OPENVPN_DATA_CHANNEL_ENCRYPT_HMAC",
    "OPENVPN_DATA_CHANNEL_DECRYPT_CIPHER",
    "OPENVPN_DATA_CHANNEL_DECRYPT_HMAC",
    "OPENVPN_CONTROL_CHANNEL_CIPHER_SPEC",
    "OPENVPN_MULTI_LEARN",
    "OPENVPN_MULTI_SVA",
    "OPENVPN_TLS_INITIAL_CONNECT",
    "OPENVPN_TLS_AUTH_SUCCESS",
    "OPENVPN_USER_AUTHN_SUCCESS",
    "OPENVPN_USER_AUTHN_FAILED"
]

filterlog = [
    "PFSENSE_BASE_RULE_V6",
    "PFSENSE_IP_RULE_V6",
    "PFSENSE_TCP_RULE_V6",
    "PFSENSE_UDP_RULE_V6",
    "PFSENSE_CARP_RULE_V6",
    "PFSENSE_ICMP_ECHO_REQ_RULE_V6",
    "PFSENSE_ICMP_ECHO_REP_RULE_V6",
    "PFSENSE_ICMP_UNREACHABLE_PROTO_RULE_V6",
    "PFSENSE_ICMP_UNREACHABLE_PORT_RULE_V6",
    "PFSENSE_ICMP_NEED_FRAG_RULE_V6",
    "PFSENSE_ICMP_TIMESTAMP_REQ_RULE_V6",
    "PFSENSE_ICMP_TIMESTAMP_REP_RULE_V6",
    "PFSENSE_ICMP_OTHER_RULE_V6",
    "PFSENSE_ICMP_UNREACH_RULE_V6",
    "PFSENSE_ICMP_UNKNOWN_RULE_V6",
    "PFSENSE_BASE_RULE_V4",
    "PFSENSE_IP_RULE_V4",
    "PFSENSE_TCP_RULE_V4",
    "PFSENSE_UDP_RULE_V4",
    "PFSENSE_CARP_RULE_V4",
    "PFSENSE_ICMP_ECHO_REQ_RULE_V4",
    "PFSENSE_ICMP_ECHO_REP_RULE_V4",
    "PFSENSE_ICMP_UNREACHABLE_PROTO_RULE_V4",
    "PFSENSE_ICMP_UNREACHABLE_PORT_RULE_V4",
    "PFSENSE_ICMP_NEED_FRAG_RULE_V4",
    "PFSENSE_ICMP_TIMESTAMP_REQ_RULE_V4",
    "PFSENSE_ICMP_TIMESTAMP_REP_RULE_V4",
    "PFSENSE_ICMP_OTHER_RULE_V4",
    "PFSENSE_ICMP_UNREACH_RULE_V4",
    "PFSENSE_ICMP_UNKNOWN_RULE_V4"
]